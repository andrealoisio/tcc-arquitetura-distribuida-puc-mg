version: '3.8'
services:
  react-dev:
    container_name: ui-desenv
    build:
        context: ./apps/gisa-ui
        dockerfile: Dockerfile.react-dev
    volumes:
        - './apps/gisa-ui:/app'
        - '/app/node_modules'
    ports:
        - '3000:3000'
    environment:
        - NODE_ENV=development

  react-prod:
      container_name: ui-prod
      build:
        context: ./apps/gisa-ui
        dockerfile: Dockerfile.react-prod
      ports:
        - '8080:80'        

  db:
    container_name: postgres_container
    image: postgres:14.0
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      timeout: 45s
      interval: 10s
      retries: 10
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=gisa
    # volumes:
    #   - ./db:/docker-entrypoint-initdb.d/
    networks:
      - postgres
      - "kong-net"
    restart: always


#  pgadmin:
#    container_name: pgadmin_container
#    image: dpage/pgadmin4
#    environment:
#      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
#      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
#      PGADMIN_CONFIG_SERVER_MODE: 'False'
#    volumes:
#      - pgadmin:/var/lib/pgadmin
#
#    ports:
#      - "${PGADMIN_PORT:-5050}:80"
#    networks:
#      - postgres
#    restart: unless-stopped

  api_gateway:
    image: kong
    networks:
      - "kong-net"
    volumes:
      - ./kong/declarative:/kong/declarative
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    environment:
      - "KONG_DECLARATIVE_CONFIG=/kong/declarative/kong.yml"
      - "KONG_DATABASE=off"
      - "KONG_PROXY_ACCESS_LOG=/dev/stdout"
      - "KONG_ADMIN_ACCESS_LOG=/dev/stdout"
      - "KONG_PROXY_ERROR_LOG=/dev/stderr"
      - "KONG_ADMIN_ERROR_LOG=/dev/stderr"
      - "KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl"
  # kong_database:
  #   image: postgres:9.6
  #   environment:
  #     - POSTGRES_USER=kong
  #     - POSTGRES_DB=kong
  #     - POSTGRES_PASSWORD=kongpass
  #   ports:
  #     - 5432:5432
  #   networks:
  #     - kong-net
  rest:
    image: quarkus/gisa-informacoes-cadastrais-jvm
    depends_on:
      - db
    build:
      context: ./apps/gisa-informacoes-cadastrais
      dockerfile: ./src/main/docker/Dockerfile.jvm
    networks:
      - "kong-net"
    # ports:
    #- "8080"
    #- "8080:8080"
    # environment:
    #   JAVA_OPTS: "-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager"
    #   JAVA_APP_JAR: "/deployments/gisa-informacoes-cadastrais-1.0.0-SNAPSHOT.jar"
    volumes:
      - ./apps/gisa-informacoes-cadastrais/target/quarkus-app:/deployments
  gerador_dados_legados:
    image: quarkus/gerador-dados-legado-jvm
    depends_on:
      - legacy_db
    build:
      context: ./apps/gerador-dados-legado
      dockerfile: ./src/main/docker/Dockerfile.jvm
    networks:
      - "kong-net"
    volumes:
      - ./apps/gerador-dados-legado/target/quarkus-app:/deployments
  legacy_db:
    image: debezium/postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=gisa
    ports:
      - 5433:5432
    healthcheck:
      test: "pg_isready -U postgres -d gisa"
      interval: 2s
      timeout: 20s
      retries: 10
    volumes:
      # - ./scripts/legacy_db:/docker-entrypoint-initdb.d/
      # - ./db:/docker-entrypoint-initdb.d/
      - "legacy_db:/var/lib/postgresql/data"
    networks:
      - "kong-net"
  zookeeper:
    container_name: "zookeeper"
    image: debezium/zookeeper:1.8
    ports:
      - "3888:3888"
      - "2888:2888"
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - "kong-net"
  kafka:
    container_name: "kafka"
    depends_on:
      - zookeeper
    image: debezium/kafka:1.8
    ports:
      - "9092:9092"
    # links:
    #   - "zookeeper:zookeeper"
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181
      # - ADVERTISED_HOST_NAME=172.29.0.1
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - "kong-net"
  debezium_connect:
    container_name: "connect"
    image: debezium/connect:1.8
    ports:
      - "8083:8083"
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
      - CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE=false
      - CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE=false
    networks:
      - "kong-net"

networks:
  kong-net:
    driver: bridge
  postgres:
    driver: bridge
volumes:
  postgres:
  pgadmin:
  legacy_db: