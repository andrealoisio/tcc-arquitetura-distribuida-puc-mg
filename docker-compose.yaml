version: '3.8'
services:
  react-prod:
      container_name: ui-prod
      image: nginx:1.16.0-alpine
      volumes:
        - ./apps/gisa-ui/build:/usr/share/nginx/html
      ports:
        - '3000:80'
      command: >
        nginx -g "daemon off;"

  db:
    container_name: postgres_container
    image: postgres:14.0
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      timeout: 45s
      interval: 10s
      retries: 10
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=gisa
    networks:
      - postgres
      - "kong-net"
    restart: always

  api_gateway:
    container_name: api_gateway
    image: kong
    networks:
      - "kong-net"
    volumes:
      - ./kong/declarative:/kong/declarative
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    environment:
      - "KONG_DECLARATIVE_CONFIG=/kong/declarative/kong.yml"
      - "KONG_DATABASE=off"
      - "KONG_PROXY_ACCESS_LOG=/dev/stdout"
      - "KONG_ADMIN_ACCESS_LOG=/dev/stdout"
      - "KONG_PROXY_ERROR_LOG=/dev/stderr"
      - "KONG_ADMIN_ERROR_LOG=/dev/stderr"
      - "KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl"
  rest:
    container_name: rest
    image: quarkus/gisa-informacoes-cadastrais-jvm
    depends_on:
      - db
    build:
      context: ./apps/gisa-informacoes-cadastrais
      dockerfile: ./src/main/docker/Dockerfile.jvm
    networks:
      - "kong-net"
    ports:
      - "8080:8080"
    volumes:
      - ./apps/gisa-informacoes-cadastrais/target/quarkus-app:/deployments
  gerador_dados_legados:
    container_name: gerador_dados_legados
    image: quarkus/gerador-dados-legado-jvm
    depends_on:
      - legacy_db
    build:
      context: ./apps/gerador-dados-legado
      dockerfile: ./src/main/docker/Dockerfile.jvm
    networks:
      - "kong-net"
    volumes:
      - ./apps/gerador-dados-legado/target/quarkus-app:/deployments
  legacy_db:
    container_name: legacy_db
    image: debezium/postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=gisa
    ports:
      - 5433:5432
    healthcheck:
      test: "pg_isready -U postgres -d gisa"
      interval: 2s
      timeout: 20s
      retries: 10
    volumes:
      - "legacy_db:/var/lib/postgresql/data"
    networks:
      - "kong-net"
  zookeeper:
    container_name: "zookeeper"
    image: debezium/zookeeper:1.8
    ports:
      - "3888:3888"
      - "2888:2888"
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - "kong-net"
  kafka:
    container_name: "kafka"
    depends_on:
      - zookeeper
    image: debezium/kafka:1.8
    ports:
      - "9092:9092"
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - ADVERTISED_HOST_NAME=kafka
    networks:
      - "kong-net"
  debezium_connect:
    container_name: "connect"
    image: debezium/connect:1.8
    ports:
      - "8083:8083"
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
      - CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE=false
      - CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE=false
    networks:
      - "kong-net"
  kafka_connect_configurator:
    container_name: "kafka_connect_configurator"
    image: curlimages/curl
    depends_on:
      - debezium_connect
    networks:
      - "kong-net"
    volumes:
      - "./scripts/debezium-conect/legacy.json:/legacy.json"
    command: >
      sh -c "until $$(curl --output /dev/null --silent --head --fail http://debezium_connect:8083); do sleep 1; done;
      cat /postgres.json;
      curl -X POST -H 'Content-Type: application/json' http://debezium_connect:8083/connectors -d @/legacy.json"

networks:
  kong-net:
    driver: bridge
  postgres:
    driver: bridge
volumes:
  postgres:
  pgadmin:
  legacy_db: